name: Validate Plugins

on:
  pull_request:
    paths:
      - 'plugins/**'
      - '.claude-plugin/**'
  push:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          find . -name "*.json" -type f -exec sh -c '
            for file; do
              echo "Checking $file"
              if ! jq empty "$file" 2>/dev/null; then
                echo "Invalid JSON: $file"
                exit 1
              fi
            done
          ' sh {} +

      - name: Check plugin structure
        run: |
          echo "Checking plugin structure..."
          for plugin in plugins/community/*/ plugins/examples/*/; do
            if [ -d "$plugin" ]; then
              echo "Validating $plugin"

              # Check for required plugin.json
              if [ ! -f "$plugin/.claude-plugin/plugin.json" ]; then
                echo "Missing plugin.json in $plugin"
                exit 1
              fi

              # Check for README
              if [ ! -f "$plugin/README.md" ]; then
                echo "Missing README.md in $plugin"
                exit 1
              fi

              # Check scripts are executable
              if [ -d "$plugin/scripts" ]; then
                find "$plugin/scripts" -type f -name "*.sh" | while read script; do
                  if [ ! -x "$script" ]; then
                    echo "Script not executable: $script"
                    exit 1
                  fi
                done
              fi
            fi
          done

      - name: Validate marketplace catalog
        run: |
          echo "Validating marketplace catalog..."
          jq empty .claude-plugin/marketplace.json

          # Check all plugin sources exist
          jq -r '.plugins[].source' .claude-plugin/marketplace.json | while read source; do
            if [[ "$source" == ./* ]]; then
              if [ ! -d "$source" ]; then
                echo "Plugin source not found: $source"
                exit 1
              fi
            fi
          done

      - name: Security scan - Detect hardcoded secrets
        run: |
          echo "Scanning for hardcoded secrets..."
          FOUND_SECRETS=0

          # Check for common secret patterns, but exclude:
          # - Placeholders (***", "xxx", "placeholder", etc.)
          # - Password generation commands (openssl rand, pwgen, etc.)
          # - Example/test values
          MATCHES=$(grep -r -E "(password|secret|api_key|token)(\s*)=(\s*)['\"]" plugins/ 2>/dev/null | \
            grep -v '\*\*\*' | \
            grep -v 'xxx' | \
            grep -v 'XXX' | \
            grep -v 'placeholder' | \
            grep -v 'PLACEHOLDER' | \
            grep -v 'example' | \
            grep -v 'EXAMPLE' | \
            grep -v 'your-' | \
            grep -v 'YOUR_' | \
            grep -v 'openssl rand' | \
            grep -v 'pwgen' | \
            grep -v '\$(' | \
            grep -E "['\"][^'\"]{20,}" || true)

          if [ -n "$MATCHES" ]; then
            echo "⚠️  WARNING: Potential hardcoded secrets detected!"
            echo "$MATCHES"
            echo "Please review the above matches and use environment variables instead."
            FOUND_SECRETS=1
          fi

          # Check for AWS keys (critical - always fail)
          if grep -r -E "AKIA[0-9A-Z]{16}" plugins/ 2>/dev/null; then
            echo "❌ ERROR: AWS Access Key detected!"
            exit 1
          fi

          # Check for private keys (critical - always fail)
          if grep -r "BEGIN.*PRIVATE KEY" plugins/ 2>/dev/null; then
            echo "❌ ERROR: Private key detected!"
            exit 1
          fi

          if [ $FOUND_SECRETS -eq 0 ]; then
            echo "✅ No hardcoded secrets detected"
          else
            echo "⚠️  Review warnings above, but not blocking CI"
          fi

      - name: Security scan - Dangerous patterns
        run: |
          echo "Scanning for dangerous command patterns..."
          FOUND_ISSUES=0

          # Check for destructive commands
          if grep -r -E "rm\s+-rf\s+/" plugins/ 2>/dev/null; then
            echo "❌ ERROR: Dangerous 'rm -rf /' pattern detected!"
            FOUND_ISSUES=1
          fi

          # Check for command injection risks
          if grep -r -E "eval\s*\(" plugins/ 2>/dev/null; then
            echo "⚠️  WARNING: 'eval()' detected - potential command injection risk"
          fi

          # Check for suspicious curl/wget to unknown domains
          if grep -r -E "curl.*http://[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" plugins/ 2>/dev/null; then
            echo "⚠️  WARNING: curl to IP address detected - potential data exfiltration"
          fi

          # Check for base64 encoded content (potential obfuscation)
          if grep -r -E "base64\s+-d" plugins/ 2>/dev/null; then
            echo "⚠️  WARNING: base64 decoding detected - potential obfuscation"
          fi

          if [ $FOUND_ISSUES -eq 0 ]; then
            echo "✅ No dangerous patterns detected"
          else
            exit 1
          fi

      - name: Security scan - Suspicious URLs
        run: |
          echo "Scanning for suspicious URLs..."
          # Check for non-HTTPS URLs (except localhost)
          if grep -r -E "http://[^l]" plugins/ | grep -v "localhost" | grep -v "127.0.0.1" 2>/dev/null; then
            echo "⚠️  WARNING: Non-HTTPS URLs detected (security risk)"
          fi

          # Check for URL shorteners (potential phishing)
          if grep -r -E "(bit\.ly|tinyurl\.com|goo\.gl)" plugins/ 2>/dev/null; then
            echo "⚠️  WARNING: URL shorteners detected (potential phishing)"
          fi

          echo "✅ URL scan complete"

      - name: Security scan - MCP plugin dependencies
        if: hashFiles('plugins/mcp/*/package.json') != ''
        run: |
          echo "Scanning MCP plugin dependencies..."
          for package in plugins/mcp/*/package.json; do
            if [ -f "$package" ]; then
              echo "Checking $package"
              dir=$(dirname "$package")
              cd "$dir"

              # Check for npm audit
              if command -v npm &> /dev/null; then
                npm audit --production || true
              fi

              cd -
            fi
          done
          echo "✅ Dependency scan complete"

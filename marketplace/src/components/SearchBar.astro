---
const categories = [
  'mcp',
  'automation',
  'business-tools',
  'devops',
  'code-analysis',
  'debugging',
  'ai-ml-assistance',
  'frontend-development',
  'security',
  'testing',
  'documentation',
  'performance',
  'database',
  'cloud-infrastructure',
  'accessibility',
  'mobile',
  'skill-enhancers',
  'design',
  'other'
];

// Category display names
const categoryLabels: Record<string, string> = {
  'mcp': 'MCP Servers',
  'automation': 'Automation',
  'business-tools': 'Business Tools',
  'devops': 'DevOps',
  'code-analysis': 'Code Analysis',
  'debugging': 'Debugging',
  'ai-ml-assistance': 'AI/ML Assistance',
  'frontend-development': 'Frontend',
  'security': 'Security',
  'testing': 'Testing',
  'documentation': 'Documentation',
  'performance': 'Performance',
  'database': 'Database',
  'cloud-infrastructure': 'Cloud',
  'accessibility': 'Accessibility',
  'mobile': 'Mobile',
  'skill-enhancers': 'Skill Enhancers',
  'design': 'Design',
  'other': 'Other'
};

const categoryIcons: Record<string, string> = {
  'mcp': 'üîå',
  'automation': '‚öôÔ∏è',
  'business-tools': 'üíº',
  'devops': 'üöÄ',
  'code-analysis': 'üîç',
  'debugging': 'üêõ',
  'ai-ml-assistance': 'ü§ñ',
  'frontend-development': 'üé®',
  'security': 'üîí',
  'testing': '‚úÖ',
  'documentation': 'üìö',
  'performance': '‚ö°',
  'database': 'üíæ',
  'cloud-infrastructure': '‚òÅÔ∏è',
  'accessibility': '‚ôø',
  'mobile': 'üì±',
  'skill-enhancers': 'üéØ',
  'design': 'üé®',
  'other': 'üîß'
};
---

<div class="search-section">
  <div class="container">
    <!-- Main search bar -->
    <div class="search-bar">
      <div class="search-input-wrapper">
        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
        </svg>
        <input
          type="text"
          id="plugin-search"
          placeholder="Search plugins by name, description, or keyword..."
          class="search-input"
          autocomplete="off"
          spellcheck="false"
        />
        <button id="clear-search" class="clear-btn" style="display: none;" title="Clear search (Esc)">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div class="filters-row">
        <!-- Multi-select category filter -->
        <div class="category-filter-wrapper">
          <button id="category-toggle" class="filter-button" type="button">
            <span class="filter-icon">üè∑Ô∏è</span>
            <span id="category-label">All Categories</span>
            <svg class="chevron" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
            </svg>
          </button>

          <!-- Dropdown menu -->
          <div id="category-dropdown" class="category-dropdown" style="display: none;">
            <div class="dropdown-header">
              <span class="dropdown-title">Filter by Category</span>
              <button id="clear-categories" class="clear-categories-btn">Clear All</button>
            </div>
            <div class="category-list">
              {categories.map(cat => (
                <label class="category-option">
                  <input type="checkbox" name="category" value={cat} class="category-checkbox" />
                  <span class="category-icon">{categoryIcons[cat]}</span>
                  <span class="category-name">{categoryLabels[cat]}</span>
                  <span class="category-count" data-category={cat}>0</span>
                </label>
              ))}
            </div>
          </div>
        </div>

        <!-- Sort dropdown -->
        <select id="sort-filter" class="filter-select">
          <option value="name">Sort: A-Z</option>
          <option value="name-desc">Sort: Z-A</option>
          <option value="featured">Sort: Featured First</option>
          <option value="recent">Sort: Recently Added</option>
        </select>

        <!-- Reset button -->
        <button id="reset-filters" class="reset-btn" style="display: none;">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
          </svg>
          Reset
        </button>
      </div>
    </div>

    <!-- Active filters badges -->
    <div id="active-filters" class="active-filters" style="display: none;"></div>

    <!-- Results info -->
    <div class="search-results-info">
      <span id="results-count" class="results-count"></span>
      <div class="filter-hints">
        <span class="hint-text">üí° Tip: Use ‚åòK (Mac) or Ctrl+K (Windows) to focus search</span>
      </div>
    </div>
  </div>
</div>

<style>
  .search-section {
    padding: 2rem 0;
    border-top: 1px solid rgba(233, 113, 1, 0.15);
    border-bottom: 1px solid rgba(233, 113, 1, 0.15);
    position: sticky;
    top: 0;
    z-index: 100;
    backdrop-filter: blur(10px);
    background: rgba(248, 244, 237, 0.95);
  }

  .container {
    max-width: 1280px;
    width: 100%;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  @media (max-width: 1024px) {
    .container {
      padding: 0 1rem;
    }
  }

  .search-bar {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
  }

  .search-input-wrapper {
    position: relative;
    flex: 1;
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--text-muted);
    pointer-events: none;
    transition: color var(--transition-base);
  }

  .search-input:focus ~ .search-icon {
    color: var(--orange-500);
  }

  .search-input {
    width: 100%;
    padding: 0.875rem 3rem 0.875rem 3rem;
    background: white;
    border: 2px solid var(--bg-tertiary);
    border-radius: 0.75rem;
    color: var(--text-primary);
    font-size: 1rem;
    font-family: var(--font-sans);
    transition: all var(--transition-base);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--orange-500);
    box-shadow: 0 0 0 3px rgba(233, 113, 1, 0.1);
    background: white;
  }

  .search-input::placeholder {
    color: var(--text-muted);
  }

  .clear-btn {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.75rem;
    height: 1.75rem;
    padding: 0;
    background: var(--bg-tertiary);
    border: none;
    border-radius: 50%;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all var(--transition-base);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .clear-btn:hover {
    background: var(--brown-400);
    color: var(--text-primary);
    transform: translateY(-50%) scale(1.1);
  }

  .clear-btn:active {
    transform: translateY(-50%) scale(0.95);
  }

  .clear-btn svg {
    width: 1rem;
    height: 1rem;
  }

  .filters-row {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    align-items: stretch;
    width: 100%;
  }

  /* Category filter dropdown */
  .category-filter-wrapper {
    position: relative;
    flex: 1;
    min-width: 250px;
  }

  .filter-button {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    background: white;
    border: 2px solid var(--bg-tertiary);
    border-radius: 0.75rem;
    color: var(--text-primary);
    font-size: 0.875rem;
    font-family: var(--font-sans);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .filter-button:hover {
    border-color: var(--brown-400);
    background: var(--bg-secondary);
  }

  .filter-button:focus {
    outline: none;
    border-color: var(--orange-500);
    box-shadow: 0 0 0 3px rgba(233, 113, 1, 0.1);
  }

  .filter-icon {
    font-size: 1.125rem;
  }

  #category-label {
    flex: 1;
    text-align: left;
  }

  .chevron {
    width: 1.25rem;
    height: 1.25rem;
    color: var(--text-muted);
    transition: transform var(--transition-base);
  }

  .filter-button[aria-expanded="true"] .chevron {
    transform: rotate(180deg);
  }

  .category-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: white;
    border: 2px solid var(--bg-tertiary);
    border-radius: 0.75rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
    z-index: 200;
    max-height: 400px;
    overflow-y: auto;
  }

  .dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--bg-tertiary);
    position: sticky;
    top: 0;
    background: white;
    z-index: 1;
  }

  .dropdown-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .clear-categories-btn {
    padding: 0.25rem 0.5rem;
    background: transparent;
    border: 1px solid var(--brown-400);
    border-radius: 0.375rem;
    color: var(--text-secondary);
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .clear-categories-btn:hover {
    border-color: var(--orange-500);
    color: var(--orange-400);
  }

  .category-list {
    padding: 0.5rem;
  }

  .category-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.625rem 0.75rem;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all var(--transition-base);
    user-select: none;
  }

  .category-option:hover {
    background: var(--bg-secondary);
  }

  .category-checkbox {
    width: 1rem;
    height: 1rem;
    border-radius: 0.25rem;
    border: 2px solid var(--brown-400);
    background: white;
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .category-checkbox:checked {
    background: var(--orange-500);
    border-color: var(--orange-500);
  }

  .category-icon {
    font-size: 1rem;
  }

  .category-name {
    flex: 1;
    font-size: 0.875rem;
    color: var(--text-primary);
    font-weight: 500;
  }

  .category-count {
    padding: 0.125rem 0.5rem;
    background: var(--bg-tertiary);
    border-radius: 9999px;
    font-size: 0.75rem;
    color: var(--text-secondary);
    font-weight: 600;
    min-width: 2rem;
    text-align: center;
  }

  .category-checkbox:checked ~ .category-count {
    background: rgba(233, 113, 1, 0.2);
    color: var(--orange-400);
  }

  /* Sort and reset */
  .filter-select {
    min-width: 180px;
    padding: 0.75rem 1rem;
    background: white;
    border: 2px solid var(--bg-tertiary);
    border-radius: 0.75rem;
    color: var(--text-primary);
    font-size: 0.875rem;
    font-family: var(--font-sans);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--orange-500);
    box-shadow: 0 0 0 3px rgba(233, 113, 1, 0.1);
  }

  .filter-select:hover {
    border-color: var(--brown-400);
    background: var(--bg-secondary);
  }

  .reset-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: white;
    border: 2px solid var(--bg-tertiary);
    border-radius: 0.75rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-base);
    font-family: var(--font-sans);
    white-space: nowrap;
  }

  .reset-btn:hover {
    background: var(--bg-tertiary);
    border-color: var(--orange-500);
    color: var(--orange-400);
  }

  .reset-btn svg {
    width: 1.125rem;
    height: 1.125rem;
  }

  /* Active filters */
  .active-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .filter-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: rgba(233, 113, 1, 0.15);
    border: 1px solid rgba(233, 113, 1, 0.3);
    border-radius: 9999px;
    color: var(--orange-400);
    font-size: 0.8125rem;
    font-weight: 600;
    font-family: var(--font-sans);
  }

  .filter-badge-icon {
    font-size: 0.875rem;
  }

  .filter-badge-remove {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1rem;
    height: 1rem;
    background: rgba(233, 113, 1, 0.2);
    border-radius: 50%;
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .filter-badge-remove:hover {
    background: rgba(233, 113, 1, 0.3);
    transform: scale(1.1);
  }

  .filter-badge-remove svg {
    width: 0.625rem;
    height: 0.625rem;
  }

  /* Results info */
  .search-results-info {
    margin-top: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .results-count {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 600;
  }

  .results-count strong {
    color: var(--orange-400);
    font-weight: 700;
  }

  .filter-hints {
    font-size: 0.75rem;
    color: var(--brown-400);
  }

  .hint-text {
    font-family: var(--font-mono);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .search-section {
      position: relative;
      padding: 1.5rem 0;
    }

    .container {
      padding: 0 1rem;
    }

    .filters-row {
      flex-direction: column;
      gap: 0.75rem;
    }

    .category-filter-wrapper,
    .filter-select,
    .reset-btn {
      width: 100%;
      min-width: 100%;
      flex: none;
    }

    .filter-hints {
      display: none;
    }

    .search-results-info {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .category-dropdown {
      max-height: 300px;
      left: 0;
      right: 0;
      width: 100%;
    }

    .active-filters {
      gap: 0.375rem;
    }

    .filter-badge {
      font-size: 0.75rem;
      padding: 0.375rem 0.625rem;
    }
  }

  /* Scrollbar styling for dropdown */
  .category-dropdown::-webkit-scrollbar {
    width: 8px;
  }

  .category-dropdown::-webkit-scrollbar-track {
    background: var(--bg-secondary);
    border-radius: 0 0.75rem 0.75rem 0;
  }

  .category-dropdown::-webkit-scrollbar-thumb {
    background: var(--brown-400);
    border-radius: 0.25rem;
  }

  .category-dropdown::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
  }
</style>

<script>
  // Enhanced filtering with debouncing, URL state, and better UX
  const searchInput = document.getElementById('plugin-search') as HTMLInputElement;
  const clearBtn = document.getElementById('clear-search') as HTMLButtonElement;
  const categoryToggle = document.getElementById('category-toggle') as HTMLButtonElement;
  const categoryDropdown = document.getElementById('category-dropdown') as HTMLDivElement;
  const categoryCheckboxes = document.querySelectorAll('.category-checkbox') as NodeListOf<HTMLInputElement>;
  const clearCategoriesBtn = document.getElementById('clear-categories') as HTMLButtonElement;
  const categoryLabel = document.getElementById('category-label') as HTMLSpanElement;
  const sortFilter = document.getElementById('sort-filter') as HTMLSelectElement;
  const resultsCount = document.getElementById('results-count') as HTMLSpanElement;
  const resetBtn = document.getElementById('reset-filters') as HTMLButtonElement;
  const activeFiltersContainer = document.getElementById('active-filters') as HTMLDivElement;

  // State
  let selectedCategories: Set<string> = new Set();
  let debounceTimer: number | null = null;

  // Initialize from URL
  function initFromURL() {
    const params = new URLSearchParams(window.location.search);

    // Search term
    const search = params.get('search');
    if (search) {
      searchInput.value = search;
    }

    // Categories (comma-separated)
    const cats = params.get('categories');
    if (cats) {
      const catArray = cats.split(',').filter(Boolean);
      catArray.forEach(cat => {
        selectedCategories.add(cat);
        const checkbox = document.querySelector(`input[value="${cat}"]`) as HTMLInputElement;
        if (checkbox) checkbox.checked = true;
      });
    }

    // Sort
    const sort = params.get('sort');
    if (sort) {
      sortFilter.value = sort;
    }
  }

  // Update URL without reload
  function updateURL() {
    const params = new URLSearchParams();

    if (searchInput.value.trim()) {
      params.set('search', searchInput.value.trim());
    }

    if (selectedCategories.size > 0) {
      params.set('categories', Array.from(selectedCategories).join(','));
    }

    if (sortFilter.value !== 'name') {
      params.set('sort', sortFilter.value);
    }

    const newURL = params.toString() ? `?${params.toString()}` : window.location.pathname;
    window.history.replaceState({}, '', newURL);
  }

  // Calculate category counts
  function updateCategoryCounts() {
    const pluginCards = Array.from(document.querySelectorAll('.plugin-card'));

    categoryCheckboxes.forEach((checkbox) => {
      const category = checkbox.value;
      let count = 0;

      // Special handling for "mcp" virtual category
      if (category === 'mcp') {
        count = pluginCards.filter(card => {
          return card.getAttribute('data-mcp') === 'true';
        }).length;
      } else {
        count = pluginCards.filter(card =>
          card.getAttribute('data-category') === category
        ).length;
      }

      const countElement = document.querySelector(`.category-count[data-category="${category}"]`) as HTMLSpanElement;
      if (countElement) {
        countElement.textContent = count.toString();
      }
    });
  }

  // Update active filters display
  function updateActiveFilters() {
    activeFiltersContainer.innerHTML = '';

    const hasFilters = searchInput.value.trim() || selectedCategories.size > 0;

    if (!hasFilters) {
      activeFiltersContainer.style.display = 'none';
      return;
    }

    activeFiltersContainer.style.display = 'flex';

    // Search filter badge
    if (searchInput.value.trim()) {
      const badge = createFilterBadge('üîç', `Search: "${searchInput.value.trim()}"`, () => {
        searchInput.value = '';
        updatePluginDisplay();
      });
      activeFiltersContainer.appendChild(badge);
    }

    // Category filter badges
    selectedCategories.forEach(category => {
      const categoryInfo = document.querySelector(`input[value="${category}"]`)?.closest('.category-option');
      const icon = categoryInfo?.querySelector('.category-icon')?.textContent || 'üè∑Ô∏è';
      const name = categoryInfo?.querySelector('.category-name')?.textContent || category;

      const badge = createFilterBadge(icon, name, () => {
        selectedCategories.delete(category);
        const checkbox = document.querySelector(`input[value="${category}"]`) as HTMLInputElement;
        if (checkbox) checkbox.checked = false;
        updateCategoryLabel();
        updatePluginDisplay();
      });
      activeFiltersContainer.appendChild(badge);
    });
  }

  // Create filter badge element
  function createFilterBadge(icon: string, text: string, onRemove: () => void): HTMLElement {
    const badge = document.createElement('div');
    badge.className = 'filter-badge';

    badge.innerHTML = `
      <span class="filter-badge-icon">${icon}</span>
      <span>${text}</span>
      <button class="filter-badge-remove" type="button">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    `;

    badge.querySelector('.filter-badge-remove')?.addEventListener('click', onRemove);
    return badge;
  }

  // Update category label
  function updateCategoryLabel() {
    if (selectedCategories.size === 0) {
      categoryLabel.textContent = 'All Categories';
    } else if (selectedCategories.size === 1) {
      const category = Array.from(selectedCategories)[0];
      const option = document.querySelector(`input[value="${category}"]`)?.closest('.category-option');
      categoryLabel.textContent = option?.querySelector('.category-name')?.textContent || category;
    } else {
      categoryLabel.textContent = `${selectedCategories.size} Categories`;
    }
  }

  // Main filter function
  function updatePluginDisplay() {
    const searchTerm = searchInput.value.toLowerCase().trim();
    const sortBy = sortFilter.value;

    const pluginCards = Array.from(document.querySelectorAll('.plugin-card'));
    let visibleCount = 0;

    // Filter plugins
    pluginCards.forEach((card) => {
      const name = card.getAttribute('data-name')?.toLowerCase() || '';
      const description = card.getAttribute('data-description')?.toLowerCase() || '';
      const keywords = card.getAttribute('data-keywords')?.toLowerCase() || '';
      const category = card.getAttribute('data-category') || '';

      // Search match (with relevance)
      const matchesSearch = !searchTerm ||
        name.includes(searchTerm) ||
        description.includes(searchTerm) ||
        keywords.includes(searchTerm);

      // Category match (OR logic for multiple selections)
      // Special handling for "mcp" virtual category - matches plugins with data-mcp="true"
      const isMcpPlugin = card.getAttribute('data-mcp') === 'true';
      const matchesCategory = selectedCategories.size === 0 ||
        selectedCategories.has(category) ||
        (selectedCategories.has('mcp') && isMcpPlugin);

      if (matchesSearch && matchesCategory) {
        (card as HTMLElement).style.display = '';
        visibleCount++;
      } else {
        (card as HTMLElement).style.display = 'none';
      }
    });

    // Sort visible plugins
    const visibleCards = pluginCards.filter(card =>
      (card as HTMLElement).style.display !== 'none'
    );

    visibleCards.sort((a, b) => {
      const aName = a.getAttribute('data-name') || '';
      const bName = b.getAttribute('data-name') || '';
      const aFeatured = a.getAttribute('data-featured') === 'true';
      const bFeatured = b.getAttribute('data-featured') === 'true';

      if (sortBy === 'featured') {
        if (aFeatured && !bFeatured) return -1;
        if (!aFeatured && bFeatured) return 1;
        return aName.localeCompare(bName);
      } else if (sortBy === 'name-desc') {
        return bName.localeCompare(aName);
      } else if (sortBy === 'recent') {
        // Assuming newer plugins have higher version numbers or recent data
        // For now, just reverse alphabetical as a proxy
        return bName.localeCompare(aName);
      } else {
        return aName.localeCompare(aName);
      }
    });

    // Reorder in DOM
    const container = document.querySelector('.plugins-grid');
    if (container) {
      visibleCards.forEach(card => container.appendChild(card));
    }

    // Update results count
    const total = pluginCards.length;
    resultsCount.innerHTML = `Showing <strong>${visibleCount}</strong> of <strong>${total}</strong> plugins`;

    // Show/hide clear button
    clearBtn.style.display = searchTerm ? 'flex' : 'none';

    // Show/hide reset button
    const hasFilters = searchTerm || selectedCategories.size > 0 || sortBy !== 'name';
    resetBtn.style.display = hasFilters ? 'flex' : 'none';

    // Update active filters
    updateActiveFilters();

    // Update URL
    updateURL();
  }

  // Debounced search
  function debounceSearch() {
    if (debounceTimer) clearTimeout(debounceTimer);
    debounceTimer = window.setTimeout(() => {
      updatePluginDisplay();
    }, 300); // 300ms debounce
  }

  // Toggle category dropdown
  function toggleCategoryDropdown() {
    const isOpen = categoryDropdown.style.display === 'flex' || categoryDropdown.style.display === 'block';

    if (isOpen) {
      categoryDropdown.style.display = 'none';
      categoryToggle.setAttribute('aria-expanded', 'false');
    } else {
      categoryDropdown.style.display = 'block';
      categoryToggle.setAttribute('aria-expanded', 'true');
    }
  }

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!categoryToggle.contains(e.target as Node) && !categoryDropdown.contains(e.target as Node)) {
      categoryDropdown.style.display = 'none';
      categoryToggle.setAttribute('aria-expanded', 'false');
    }
  });

  // Event listeners
  searchInput.addEventListener('input', debounceSearch);

  categoryToggle.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleCategoryDropdown();
  });

  categoryCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
      if (checkbox.checked) {
        selectedCategories.add(checkbox.value);
      } else {
        selectedCategories.delete(checkbox.value);
      }
      updateCategoryLabel();
      updatePluginDisplay();
    });
  });

  clearCategoriesBtn.addEventListener('click', () => {
    categoryCheckboxes.forEach(checkbox => {
      checkbox.checked = false;
    });
    selectedCategories.clear();
    updateCategoryLabel();
    updatePluginDisplay();
  });

  sortFilter.addEventListener('change', updatePluginDisplay);

  clearBtn.addEventListener('click', () => {
    searchInput.value = '';
    updatePluginDisplay();
    searchInput.focus();
  });

  resetBtn.addEventListener('click', () => {
    searchInput.value = '';
    categoryCheckboxes.forEach(checkbox => checkbox.checked = false);
    selectedCategories.clear();
    sortFilter.value = 'name';
    updateCategoryLabel();
    updatePluginDisplay();
    searchInput.focus();
  });

  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // Cmd/Ctrl + K to focus search
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      searchInput.focus();
    }

    // Escape to clear search or close dropdown
    if (e.key === 'Escape') {
      if (categoryDropdown.style.display !== 'none') {
        categoryDropdown.style.display = 'none';
        categoryToggle.setAttribute('aria-expanded', 'false');
      } else if (searchInput.value) {
        searchInput.value = '';
        updatePluginDisplay();
      }
    }
  });

  // Initialize
  initFromURL();
  updateCategoryCounts();
  updateCategoryLabel();
  updatePluginDisplay();
</script>
